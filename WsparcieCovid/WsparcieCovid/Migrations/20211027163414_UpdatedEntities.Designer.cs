// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WsparcieCovid.Data;

namespace WsparcieCovid.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211027163414_UpdatedEntities")]
    partial class UpdatedEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("WsparcieCovid.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ContributorId")
                        .HasColumnType("integer");

                    b.Property<int?>("EntrepreneurId")
                        .HasColumnType("integer");

                    b.Property<string>("FlatNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContributorId");

                    b.HasIndex("EntrepreneurId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Contributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int?>("ContributorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateConfirmed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EntrepreneurId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContributorId");

                    b.HasIndex("EntrepreneurId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Entrepreneur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NipNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Entrepreneurs");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.GiftCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ContributorId")
                        .HasColumnType("integer");

                    b.Property<int?>("EntrepreneurId")
                        .HasColumnType("integer");

                    b.Property<string>("RedeemCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContributorId");

                    b.HasIndex("EntrepreneurId");

                    b.ToTable("GiftCards");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ContributorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOrdered")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DatePaid")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EntrepreneurId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContributorId");

                    b.HasIndex("EntrepreneurId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EntrepreneurId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntrepreneurId");

                    b.HasIndex("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)");

                    b.Property<DateTime>("ValidTill")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ContributorId")
                        .HasColumnType("integer");

                    b.Property<int?>("EntrepreneurId")
                        .HasColumnType("integer");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContributorId");

                    b.HasIndex("EntrepreneurId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.SupportMethods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("CanDonate")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanGiftCard")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanOrder")
                        .HasColumnType("boolean");

                    b.Property<int?>("EntrepreneurId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntrepreneurId")
                        .IsUnique();

                    b.ToTable("SupportMethods");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PassHash")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Address", b =>
                {
                    b.HasOne("WsparcieCovid.Entities.Contributor", "Contributor")
                        .WithMany()
                        .HasForeignKey("ContributorId");

                    b.HasOne("WsparcieCovid.Entities.Entrepreneur", "Entrepreneur")
                        .WithMany()
                        .HasForeignKey("EntrepreneurId");

                    b.Navigation("Contributor");

                    b.Navigation("Entrepreneur");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Contributor", b =>
                {
                    b.HasOne("WsparcieCovid.Entities.User", "User")
                        .WithOne("Contributor")
                        .HasForeignKey("WsparcieCovid.Entities.Contributor", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Donation", b =>
                {
                    b.HasOne("WsparcieCovid.Entities.Contributor", "Contributor")
                        .WithMany("Donations")
                        .HasForeignKey("ContributorId");

                    b.HasOne("WsparcieCovid.Entities.Entrepreneur", "Entrepreneur")
                        .WithMany("Donations")
                        .HasForeignKey("EntrepreneurId");

                    b.Navigation("Contributor");

                    b.Navigation("Entrepreneur");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Entrepreneur", b =>
                {
                    b.HasOne("WsparcieCovid.Entities.User", "User")
                        .WithOne("Entrepreneur")
                        .HasForeignKey("WsparcieCovid.Entities.Entrepreneur", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.GiftCard", b =>
                {
                    b.HasOne("WsparcieCovid.Entities.Contributor", "Contributor")
                        .WithMany("GiftCards")
                        .HasForeignKey("ContributorId");

                    b.HasOne("WsparcieCovid.Entities.Entrepreneur", "Entrepreneur")
                        .WithMany("GiftCards")
                        .HasForeignKey("EntrepreneurId");

                    b.Navigation("Contributor");

                    b.Navigation("Entrepreneur");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Order", b =>
                {
                    b.HasOne("WsparcieCovid.Entities.Contributor", "Contributor")
                        .WithMany("Orders")
                        .HasForeignKey("ContributorId");

                    b.HasOne("WsparcieCovid.Entities.Entrepreneur", "Entrepreneur")
                        .WithMany()
                        .HasForeignKey("EntrepreneurId");

                    b.Navigation("Contributor");

                    b.Navigation("Entrepreneur");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Product", b =>
                {
                    b.HasOne("WsparcieCovid.Entities.Entrepreneur", "Entrepreneur")
                        .WithMany("Products")
                        .HasForeignKey("EntrepreneurId");

                    b.HasOne("WsparcieCovid.Entities.Order", null)
                        .WithMany("Product")
                        .HasForeignKey("ProductId");

                    b.Navigation("Entrepreneur");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Review", b =>
                {
                    b.HasOne("WsparcieCovid.Entities.Contributor", "Contributor")
                        .WithMany("Reviews")
                        .HasForeignKey("ContributorId");

                    b.HasOne("WsparcieCovid.Entities.Entrepreneur", "Entrepreneur")
                        .WithMany("Reviews")
                        .HasForeignKey("EntrepreneurId");

                    b.Navigation("Contributor");

                    b.Navigation("Entrepreneur");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.SupportMethods", b =>
                {
                    b.HasOne("WsparcieCovid.Entities.Entrepreneur", "Entrepreneur")
                        .WithOne("SupportMethods")
                        .HasForeignKey("WsparcieCovid.Entities.SupportMethods", "EntrepreneurId");

                    b.Navigation("Entrepreneur");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Contributor", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("GiftCards");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Entrepreneur", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("GiftCards");

                    b.Navigation("Products");

                    b.Navigation("Reviews");

                    b.Navigation("SupportMethods");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.Order", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("WsparcieCovid.Entities.User", b =>
                {
                    b.Navigation("Contributor");

                    b.Navigation("Entrepreneur");
                });
#pragma warning restore 612, 618
        }
    }
}
